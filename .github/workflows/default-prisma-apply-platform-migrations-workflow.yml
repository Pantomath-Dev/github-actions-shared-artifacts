name: Reusable prisma migration platform deployment workflow

on:
  workflow_call:
    inputs:
      DEPLOYMENT_PREFIX:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      ORG_NAME:
        required: true
        type: string
      SCHEMAS:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      PACKAGES_TOKEN:
        required: true

jobs:
  get-customers:
    runs-on: ubuntu-latest
    outputs:
      customers: ${{ steps.RETURN.outputs.CUSTOMERS }}
    steps:
      - name: Installing AWS CLI
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Platform API Param Values
        run: |
          echo "Retrieving all customers..."
          ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          DEPLOYMENT_PREFIX=${{ inputs.DEPLOYMENT_PREFIX }}

          PLATFORM_CORE_URL_SSM_NAME=/${ENVIRONMENT}/${DEPLOYMENT_PREFIX}/SERVICE_MOCKS_CORE
          echo $PLATFORM_CORE_URL_SSM_NAME

          PLATFORM_CORE_API_KEY_SSM_NAME=/${ENVIRONMENT}/${DEPLOYMENT_PREFIX}/SERVICE_MOCKS_CORE_API_KEY
          echo $PLATFORM_CORE_API_KEY_SSM_NAME

          echo "Retrieving Platform Core URL..."
          URL="$(aws ssm get-parameter --name $PLATFORM_CORE_URL_SSM_NAME | jq -r '.Parameter.Value')"
          echo $URL
          echo "::set-output name=URL::$URL"

          echo "Retrieving Platform Core API KEY..."
          API_KEY="$(aws ssm get-parameter --name $PLATFORM_CORE_API_KEY_SSM_NAME --with-decryption | jq -r '.Parameter.Value')"
          echo $API_KEY
          echo "::set-output name=API_KEY::$API_KEY"
        id: PLATFORM-CORE

      - name: Get All Customers from Customer Platform Core API
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ steps.PLATFORM-CORE.outputs.URL }}/customers'
          method: 'GET'
          customHeaders: '{"Content-Type": "application/json", "x-api-key": "${{ steps.PLATFORM-CORE.outputs.API_KEY }}"}'
        id: GET-CUSTOMERS

      - name: Save Customers to Output and Implicitly Matrix
        run: |
          echo "Retrieving all customers as output..."
          CUSTOMERS_RESPONSE=${{ toJson(steps.GET-CUSTOMERS.outputs.response) }}
          CUSTOMERS=$(echo $CUSTOMERS_RESPONSE | jq -c '.items')
          echo $CUSTOMERS
          echo "::set-output name=CUSTOMERS::$CUSTOMERS"
          echo ${{ inputs.SCHEMAS }}
        id: RETURN

  platform-prisma-migrate-deploy:
    runs-on: ubuntu-latest
    needs: get-customers
    strategy:
      matrix:
        customer: ${{fromJson(needs.get-customers.outputs.customers)}}
    steps:
      - name: Cancel Previous Runs
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: styfle/cancel-workflow-action@0.9.1

      - name: Setup Nodejs
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Installing AWS CLI
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install dependencies
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Configure AWS
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout Code
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: actions/checkout@v2

      - name: Create .npmrc
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        uses: FerLuisxd/create-npmrc@3
        with:
          org_name: ${{ inputs.ORG_NAME }}
        env:
          AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

      - name: Backup Customer DB Instance
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        run: |
          echo "Backing up ${{ matrix.customer.schema }} platform schema instance"

          echo "Generating SSM DB Identifier Name..."
          SSM_DB_IDENTIFIER_NAME=${{ matrix.customer.databaseIdentifierRef }}

          echo "Retrieving SSM DB Identifier..."
          DATABASE_IDENTIFIER="$(aws ssm get-parameter --name $SSM_DB_IDENTIFIER_NAME | jq -r '.Parameter.Value')"

          echo "Generating Backup of RDS Instance before migrating and wait for it to finish"
          aws rds wait db-instance-available --db-instance-identifier $DATABASE_IDENTIFIER
          SNAPSHOT_ID=$( aws rds create-db-snapshot --db-snapshot-identifier platform-${{ matrix.customer.schema }}-migration-generated-backup-$EPOCHSECONDS --db-instance-identifier $DATABASE_IDENTIFIER --query 'DBSnapshot.[DBSnapshotIdentifier]' --output text )
          aws rds wait db-snapshot-completed --db-snapshot-identifier $SNAPSHOT_ID
          aws rds wait db-instance-available --db-instance-identifier $DATABASE_IDENTIFIER

      - name: Apply Platform Migrations for ${{ matrix.customer.schema }} Schema
        if: contains(inputs.SCHEMAS, matrix.customer.schema)
        run: |
          echo "Apply ${{ matrix.customer.schema }} platform schema migrations"

          echo "Retrieving Environment Context..."
          ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          DEPLOYMENT_PREFIX=${{ inputs.DEPLOYMENT_PREFIX }}

          echo "Generating SSM Connection String Name..."
          SSM_CONNECTION_STRING_NAME=${{ matrix.customer.databaseConnectionRef }}

          echo "Retrieving SSM DB Connection String..."
          DATABASE_CONNECTION_STRING="$(aws ssm get-parameter --name $SSM_CONNECTION_STRING_NAME --with-decryption | jq -r '.Parameter.Value')"

          echo "Saving DB Connection String to .env file..."
          echo "APPLICATION_POSTGRES_CONNECTION_STRING"="$DATABASE_CONNECTION_STRING?schema=${{ matrix.customer.schema }}" >> ".env"

          echo "Clean runnings..."
          npm run clean

          echo "Applying customer migrations to database..."
          ./node_modules/.bin/prisma migrate deploy --schema ./platform/${{ matrix.customer.schema }}/platform.prisma
